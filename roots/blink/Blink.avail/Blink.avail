/*
 * Blink.avail
 * Copyright (c) Todd L Smith and Taylor DH Smith, 2017.
 * All rights reserved.
 */

Module "Blink"
Extends
	"Avail" =
	(
		/* Numeric literals (for integer range type construction). */
		"…#",

		/* Integer range type construction. */
		"[_.._]"
	),
	"Colors",
	"Events" =
	(
		/* Hardware events. */
		"boot",
		"button press",
		"button release",
		"click",
		"double click",
		"triple click",
		"long click",

		/* Software events. */
		"heartbeat",
		"neighborhood occupancy changed",
		"neighborhood state changed",
		"timer expired"
	),
	"Expressions" =
	(
		/* State enumeration statements. */
		"(Blink)«_‡,and⁇»is|are a⁇public state|states." →
			"«_‡,and⁇»is|are a⁇public state|states.",

		/* Global variable declaration statements. */
		"(Blink)_is_." → "_is_.",

		/* Signal declaration statements. */
		"(Blink)_is a signal." → "_is a signal.",

		/* Timer declaration statements. */
		"(Blink)_is a timer." → "_is a timer.",

		/* Event handler statements. */
		"(Blink)On_,_." → "On_,_.",

		/* Signal handler statements. */
		"(Blink)To_,_." → "To_,_.",
		"(Blink)To_:_." → "To_:_.",

		/* Block expressions. */
		"(Blink)[§«_‡.».⁇]" → "[§«_‡.».⁇]",

		/* Local variable declaration statements. */
		"(Blink)…::=_" → "…::=_",
		"(Blink)…:_†:=_" → "…:_†:=_",

		/* Local variable usage. */
		"(Blink)…" → "…",

		/* Ownership expressions. */
		"(Blink)my_" → "my_",

		/* Assignment statements. */
		"(Blink)…:=_" → "…:=_",
		"(Blink)…:=_" → "Change…to_",
		"(Blink)Change_to_" → "Change_to_",

		/* Conditional statements. */
		"(Blink)If|if_,_" → "If|if_,_",
		"(Blink)If|if_:_" → "If|if_:_",

		/* Conditional expressions. */
		"(Blink)If|if_,_;else,_" → "If|if_,_;else,_",
		"(Blink)If|if_:_;else,_" → "If|if_:_;else,_",
		"(Blink)If|if_,_;else:_" → "If|if_,_;else:_",
		"(Blink)If|if_:_;else:_" → "If|if_:_;else:_",

		/* Unary arithmetic operators. */
		"(Blink)-_" → "-_",

		/* Binary arithmetic operators. */
		"(Blink)_+_" → "_+_",
		"(Blink)_-_" → "_-_",
		"(Blink)_×_" → "_×_",
		"(Blink)_×_" → "_*_",
		"(Blink)_÷_" → "_÷_",
		"(Blink)_÷_" → "_/_",
		"(Blink)_%_" → "_%_",

		/* Compound binary arithmetic operators. */
		"(Blink)_+=_" → "_+=_",
		"(Blink)_-=_" → "_-=_",
		"(Blink)_×=_" → "_×=_",
		"(Blink)_×=_" → "_*=_",
		"(Blink)_÷=_" → "_÷=_",
		"(Blink)_÷=_" → "_/=_",
		"(Blink)_%=_" → "_%=_",

		/* Unary logical operators. */
		"(Blink)¬_" → "¬_",
		"(Blink)¬_" → "`!_",
		"(Blink)¬_" → "not_",

		/* Binary logical operators. */
		"(Blink)_∧_" → "_∧_",
		"(Blink)_∧_" → "_&&_",
		"(Blink)_∧_" → "_and_",
		"(Blink)_∨_" → "_∨_",
		"(Blink)_∨_" → "_`|`|_",
		"(Blink)_∨_" → "_or_",

		/* Compound binary logical operators. */
		"(Blink)_∧=_" → "_∧=_",
		"(Blink)_∧=_" → "_&&=_",
		"(Blink)_∨=_" → "_∨=_",
		"(Blink)_∨=_" → "_`|`|=_",
		
		/* Binary relational operators. */
		"(Blink)_=_" → "_=_",
		"(Blink)_≠_" → "_≠_",
		"(Blink)_<_" → "_<_",
		"(Blink)_≤_" → "_≤_",
		"(Blink)_≤_" → "_<=_",
		"(Blink)_≥_" → "_≥_",
		"(Blink)_≥_" → "_>=_",
		"(Blink)_>_" → "_>_"
	),
	"Lighting Modes" =
	(
		"constant",
		"pulsing"
	),
	"Lighting Patterns" =
	(
		"linear interpolation⁇",
		"sinusoidal interpolation⁇"
	),
	"Literals" =
	(
		"(Blink)…#" → "…#",
		"(Blink)…$" → "…$"
	),
	"Standard Variables" =
	(
		"lighting⁇color variable" → "lighting⁇color",
		"lighting⁇mode variable" → "lighting⁇mode",
		"lighting⁇pattern variable" → "lighting⁇pattern",
		"lighting⁇pattern duration variable" → "lighting⁇pattern duration"
	)
Body
