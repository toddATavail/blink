/*
 * Blink.avail
 * Copyright (c) Todd L Smith and Taylor DH Smith, 2017.
 * All rights reserved.
 */

Module "Blink"
Uses
	/* We need to import certain facilities locally in order to tighten up the
	 * Blink grammar. In particular, we need to establish the precedence and
	 * associativity of certain operators.
	 */
	"Avail" =
	(
		/* Top-level statements. */
		"_!;",

		/* String literals. */
		"…$",

		/* Grammatical restrictions. */
		"Grammatical restriction_is_",

		/* Sets. */
		"{«_‡,»}",
		"∅",

		/* Tuples. */
		"<«_‡,»>"
	)
Extends
	"Avail" =
	(
		/* Numeric literals (for integer range type construction). */
		"…#",

		/* Parentheses (for grouping). */
		"(_)",

		/* Integer range type construction. */
		"[_.._]"
	),
	"Colors",
	"Events" =
	(
		/* Hardware events. */
		"boot",
		"button press",
		"button release",
		"click",
		"double click",
		"triple click",
		"long click"
	),
	"Expressions" =
	(
		/* State enumeration statements. */
		"(Blink)«_‡,and⁇»is|are a⁇public state|states." →
			"«_‡,and⁇»is|are a⁇public state|states.",

		/* Global variable declaration statements. */
		"(Blink)_is_." → "_is_.",

		/* Signal declaration statements. */
		"(Blink)_is a signal." → "_is a signal.",

		/* Timer declaration statements. */
		"(Blink)_is a timer." → "_is a timer.",

		/* Event handler statements. */
		"(Blink)On_,_." → "On_,_.",

		/* Neighbor occupancy changed handler statements. */
		"(Blink)When I join any neighbors§,_."
			→ "When I join any neighbors§,_.",
		"(Blink)When I join any neighbors§:_."
			→ "When I join any neighbors§:_.",

		/* State changed handler statements. */
		"(Blink)When I change from_§to_§,_." → "When I change from_§to_§,_.",
		"(Blink)When I change from_§to_§:_." → "When I change from_§to_§:_.",

		/* Neighbor state changed handler statements. */
		"(Blink)When any_§neighbor becomes_§,_."
			→ "When any_§neighbor becomes_§,_.",
		"(Blink)When any_§neighbor becomes_§:_."
			→ "When any_§neighbor becomes_§:_.",

		/* Isolation handler statements. */
		"(Blink)When I become isolated,_." → "When I become isolated,_.",
		"(Blink)When I become isolated:_." → "When I become isolated:_.",

		/* Timer threshold event handler statements. */
		"(Blink)When_has_remaining,_." → "When_has_remaining,_.",
		"(Blink)When_has_remaining:_." → "When_has_remaining:_.",

		/* Timer expired event handler statements. */
		"(Blink)When_expires,_." → "When_expires,_.",
		"(Blink)When_expires:_." → "When_expires:_.",

		/* Signal handler statements. */
		"(Blink)To_,_." → "To_,_.",
		"(Blink)To_:_." → "To_:_.",

		/* Block expressions. */
		"(Blink)[§«_‡.».⁇]" → "[§«_‡.».⁇]",

		/* Local variable declaration statements. */
		"(Blink)…::=_" → "…::=_",
		"(Blink)…:_†:=_" → "…:_†:=_",

		/* Local variable usage. */
		"(Blink)…" → "…",

		/* Ownership expressions. */
		"(Blink)my_" → "my_",

		/* Argument expressions. */
		"(Blink)these neighbors" → "these neighbors",

		/* Dimensioned expressions. */
		"(Blink)_ms" → "_ms",
		"(Blink)_s" → "_s",

		/* Assignment statements. */
		"(Blink)…:=_" → "…:=_",
		"(Blink)…:=_" → "Change|change…to_",
		"(Blink)Change|change_to_" → "Change|change_to_",
		"(Blink)Change|change_to_" → "_:=_",

		/* Conditional statements. */
		"(Blink)If|if_,_" → "If|if_,_",
		"(Blink)If|if_:_" → "If|if_:_",

		/* Conditional expressions. */
		"(Blink)If|if_,_;else,_" → "If|if_,_;else,_",
		"(Blink)If|if_:_;else,_" → "If|if_:_;else,_",
		"(Blink)If|if_,_;else:_" → "If|if_,_;else:_",
		"(Blink)If|if_:_;else:_" → "If|if_:_;else:_",

		/* Fire signal statements. */
		"(Blink)Now|now_" → "Now|now_",

		/* Timer query expressions. */
		"(Blink)_'s⁇remaining time" → "_'s⁇remaining time",

		/* Timer manipulation expressions. */
		"(Blink)Expire|expire_in_" → "Expire|expire_in_",
		"(Blink)Adjust|adjust_by_" → "Adjust|adjust_by_",

		/* Neighborhood filtration expressions. */
		"(Blink)_neighbors" → "_neighbors",
		"(Blink)no neighbors are_" → "no neighbors are_",
		"(Blink)any neighbors are_" → "any neighbors are_",
		"(Blink)all neighbors are_" → "all neighbors are_",

		/* Unary arithmetic operators. */
		"(Blink)-_" → "-_",

		/* Binary arithmetic operators. */
		"(Blink)_+_" → "_+_",
		"(Blink)_-_" → "_-_",
		"(Blink)_×_" → "_×_",
		"(Blink)_×_" → "_*_",
		"(Blink)_÷_" → "_÷_",
		"(Blink)_÷_" → "_/_",
		"(Blink)_\\_" → "_\\_",

		/* Compound binary arithmetic operators. */
		"(Blink)_+=_" → "_+=_",
		"(Blink)_-=_" → "_-=_",
		"(Blink)_×=_" → "_×=_",
		"(Blink)_×=_" → "_*=_",
		"(Blink)_÷=_" → "_÷=_",
		"(Blink)_÷=_" → "_/=_",
		"(Blink)_\\=_" → "_\\=_",

		/* Unary logical operators. */
		"(Blink)¬_" → "¬_",
		"(Blink)¬_" → "`!_",
		"(Blink)¬_" → "not_",

		/* Binary logical operators. */
		"(Blink)_∧_" → "_∧_",
		"(Blink)_∧_" → "_&&_",
		"(Blink)_∧_" → "_and_",
		"(Blink)_∨_" → "_∨_",
		"(Blink)_∨_" → "_`|`|_",
		"(Blink)_∨_" → "_or_",

		/* Compound binary logical operators. */
		"(Blink)_∧=_" → "_∧=_",
		"(Blink)_∧=_" → "_&&=_",
		"(Blink)_∨=_" → "_∨=_",
		"(Blink)_∨=_" → "_`|`|=_",
		
		/* Binary relational operators. */
		"(Blink)_=_" → "_=_",
		"(Blink)_=_" → "_is_",
		"(Blink)_≠_" → "_≠_",
		"(Blink)_≠_" → "_is not_",
		"(Blink)_≠_" → "_isn't_",
		"(Blink)_<_" → "_<_",
		"(Blink)_≤_" → "_≤_",
		"(Blink)_≤_" → "_<=_",
		"(Blink)_≥_" → "_≥_",
		"(Blink)_≥_" → "_>=_",
		"(Blink)_>_" → "_>_",

		/* Tuple operators. */
		"(Blink)`|_`|" → "`|_`|",
		"(Blink)`|_`|" → "count of_",
		"(Blink)`|_`|" → "size of_"
	),
	"Lighting Modes" =
	(
		"constant",
		"pulsing"
	),
	"Lighting Patterns" =
	(
		"linear interpolation⁇",
		"sinusoidal interpolation⁇",
		"flashing interpolation⁇"
	),
	"Literals" =
	(
		"(Blink)…#" → "…#",
		"(Blink)…$" → "…$"
	),
	"Standard Variables" =
	(
		"(Blink)lighting⁇color variable" → "lighting⁇color",
		"(Blink)lighting⁇mode variable" → "lighting⁇mode",
		"(Blink)lighting⁇pattern variable" → "lighting⁇pattern",
		"(Blink)lighting⁇pattern duration variable"
			→ "lighting⁇pattern duration"
	)
Body

/* Establish that negation has higher precedence than other arithmetic
 * operators, and forbid negation from nesting (without intervening
 * parentheses).
 */
Grammatical restriction "-_" is
	<{"-_", "_+_", "_-_", "_×_", "_*_", "_÷_", "_/_", "_\\_"}>;

/* Establish that addition and subtraction are left associative. */
Grammatical restriction {"_+_", "_-_"} is <∅, {"_+_", "_-_"}>;

/* Establish that multiplication, division, and modulus have higher precedence
 * than addition and subtraction and are left associative.
 */
Grammatical restriction {"_×_", "_*_", "_÷_", "_/_", "_\\_"} is
	<{"_+_", "_-_"}, {"_+_", "_-_", "_×_", "_*_", "_÷_", "_/_", "_\\_"}>;

/* Establish that negation has higher precedence than other logical
 * operators.
 */
Grammatical restriction {"¬_", "`!_", "not_"} is
	<{"¬_", "`!_", "not_", "_∧_", "_&&_", "_and_", "_∨_", "_`|`|_", "_or_"}>;

/* Establish that equality and inequality are left associative. */
Grammatical restriction {"_=_", "_is_", "_≠_", "_is not_", "_isn't_"} is
	<∅, {"_=_", "_is_", "_≠_", "_is not_", "_isn't_"}>;

/* Prefer "(x) is not (y)" to "x is (not y)". */
Grammatical restriction {"_is_"} is <∅, {"not_"}>;

/* Forbid various travesties. */
Grammatical restriction {"my_"} is <{"(_)", "these neighbors"}>;
Grammatical restriction {"not_"} is
	<{"no neighbors are_", "any neighbors are_", "all neighbors are_"}>;